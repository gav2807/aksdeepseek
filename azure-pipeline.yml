trigger:
  - main

variables:
  - group: 'aksgp'  # Variable group with Client ID and Client Secret
  - name: 'resourceGroupName'
    value: 'aksrglab'
  - name: 'aksClusterName'
    value: 'deepseek-aks'
  - name: 'parametersFile'
    value: 'aks.parameters.json'
  - name: 'namespace'
    value: 'grafana'
  # - name: 'dockerImage'
  #   value: 'grafana/grafana'
  # - name: 'dockerTag'
  #   value: 'main-ubuntu'

stages:
- stage: Deploy_AKS
  displayName: 'Deploy AKS using Bicep'
  jobs:
  - job: Deploy_AKS
    displayName: 'Deploy AKS Cluster'
    pool:
      name: 'dsha'  # Ensure this is your correct self-hosted agent pool

    steps:
    - task: AzureCLI@2
      displayName: 'Deploy AKS using Bicep'
      inputs:
        azureSubscription: 'bicepaibspn'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az deployment group create --resource-group $(resourceGroupName) --template-file k8s.bicep --parameters $(parametersFile) servicePrincipalClientId=$(ServicePrincipalClientId) servicePrincipalClientSecret=$(ServicePrincipalClientSecret)

    - task: AzureCLI@2
      displayName: 'Get AKS Credentials'
      inputs:
        azureSubscription: 'bicepaibspn'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group $(resourceGroupName) --name $(aksClusterName) --overwrite-existing

- stage: Deploy_Grafana
  displayName: 'Deploy Grafana to AKS'
  dependsOn: Deploy_AKS
  jobs:
  - job: Deploy_Grafana
    displayName: 'Deploy Grafana Container'
    pool:
      name: 'dsha'  # Ensure this is a valid agent pool

    steps:
    - task: PowerShell@2
      displayName: 'Create Namespace'
      inputs:
        targetType: 'inline'
        script: |
          kubectl create namespace $(namespace) --dry-run=client -o yaml | kubectl apply -f -

    ## ðŸš€ Create PVC for Grafana ##
    - task: PowerShell@2
      displayName: 'Create Grafana PVC'
      inputs:
        targetType: 'inline'
        script: |
          $yaml = @"
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: grafana-pvc
            namespace: $(namespace)
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 10Gi
          "@
          $yaml | Out-File -FilePath grafana-pvc.yaml -Encoding utf8
          kubectl apply -f grafana-pvc.yaml

    ## ðŸš€ Deploy Grafana ##
    - task: PowerShell@2
      displayName: 'Deploy Grafana'
      inputs:
        targetType: 'inline'
        script: |
          $yaml = @"
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: grafana
            namespace: $(namespace)
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: grafana
            template:
              metadata:
                labels:
                  app: grafana
              spec:
                containers:
                - name: grafana
                  image: grafana/grafana:latest
                  ports:
                  - containerPort: 3000
                  volumeMounts:
                  - name: grafana-storage
                    mountPath: /var/lib/grafana
                volumes:
                - name: grafana-storage
                  persistentVolumeClaim:
                    claimName: grafana-pvc
          "@
          $yaml | Out-File -FilePath grafana-deployment.yaml -Encoding utf8
          kubectl apply -f grafana-deployment.yaml

    ## ðŸš€ Expose Grafana ##
    - task: PowerShell@2
      displayName: 'Expose Grafana Service'
      inputs:
        targetType: 'inline'
        script: |
          $yaml = @"
          apiVersion: v1
          kind: Service
          metadata:
            name: grafana-service
            namespace: $(namespace)
          spec:
            selector:
              app: grafana
            ports:
              - protocol: TCP
                port: 80
                targetPort: 3000
            type: LoadBalancer
          "@
          $yaml | Out-File -FilePath grafana-service.yaml -Encoding utf8
          kubectl apply -f grafana-service.yaml

