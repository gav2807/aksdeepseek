trigger:
  - main

variables:
  - group: 'aksgp'  # Variable group with Client ID and Client Secret
  - name: 'resourceGroupName'
    value: 'aksrglab'
  - name: 'aksClusterName'
    value: 'deepseek-aks'
  - name: 'parametersFile'
    value: 'aks.parameters.json'
  - name: 'namespace'
    value: 'deepseek'
  - name: 'dockerImage'
    value: 'ghcr.io/open-webui'
  - name: 'dockerTag'
    value: 'ollama'

stages:
- stage: Deploy_AKS
  displayName: 'Deploy AKS using Bicep'
  jobs:
  - job: Deploy_AKS
    displayName: 'Deploy AKS Cluster'
    pool:
      name: 'dsha'  # Ensure this is your correct self-hosted agent pool

    steps:
    - task: AzureCLI@2
      displayName: 'Deploy AKS using Bicep'
      inputs:
        azureSubscription: 'bicepaibspn'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az deployment group create --resource-group $(resourceGroupName) --template-file k8s.bicep --parameters $(parametersFile) servicePrincipalClientId=$(ServicePrincipalClientId) servicePrincipalClientSecret=$(ServicePrincipalClientSecret)

    - task: AzureCLI@2
      displayName: 'Get AKS Credentials'
      inputs:
        azureSubscription: 'bicepaibspn'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group $(resourceGroupName) --name $(aksClusterName) --overwrite-existing

- stage: Deploy_DeepSeek
  displayName: 'Deploy DeepSeek to AKS'
  dependsOn: Deploy_AKS
  jobs:
  - job: Deploy_DeepSeek
    displayName: 'Deploy DeepSeek Container'
    pool:
      name: 'dsha'  # Ensure this is a valid agent pool

    steps:
    - task: PowerShell@2
      displayName: 'Create Namespace'
      inputs:
        targetType: 'inline'
        script: |
          kubectl create namespace $(namespace) --dry-run=client -o yaml | kubectl apply -f -

    - task: PowerShell@2
      displayName: 'Deploy DeepSeek AI Container'
      inputs:
        targetType: 'inline'
        script: |
          $yaml = @"
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: deepseek-deployment
            namespace: $(namespace)
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: deepseek
            template:
              metadata:
                labels:
                  app: deepseek
              spec:
                containers:
                - name: deepseek
                  image: $(dockerImage):$(dockerTag)
                  ports:
                  - containerPort: 8080
          "@
          $yaml | Out-File -FilePath deepseek-deployment.yaml -Encoding utf8
          kubectl apply -f deepseek-deployment.yaml

    - task: PowerShell@2
      displayName: 'Expose DeepSeek Service'
      inputs:
        targetType: 'inline'
        script: |
          $yaml = @"
          apiVersion: v1
          kind: Service
          metadata:
            name: deepseek-service
            namespace: $(namespace)
          spec:
            selector:
              app: deepseek
            ports:
              - protocol: TCP
                port: 80
                targetPort: 8080
            type: LoadBalancer
          "@
          $yaml | Out-File -FilePath deepseek-service.yaml -Encoding utf8
          kubectl apply -f deepseek-service.yaml
